#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# All supported releases should be able to create an audio chroot and play sound

if [ -z "$release" ]; then
    echo "all"
    exit 0
fi

snapshot "$release" core
crouton -u -n "$release" -t audio

# We pass -fdat to aplay/arecord, which means 48kHz, 16-bit, stereo.
# dd writes/reads 8 blocks of 48000 bytes: 2 seconds worth of sound.
exitswithin 0 30 host enter-chroot -n "$release" sh -exc '
    cras_test_client --dump_server_info
    dd if=/dev/zero bs=48000 count=8 | aplay -fdat -v
    arecord -fdat -v | dd of=/dev/null bs=48000 count=8 iflag=fullblock
'

# On x86_64 systems, test x86 client
if [ "`uname -m`" = "x86_64" ]; then
    echo '
        mkdir -p /home/tmp
        if [ "${DISTROAKA:-"$DISTRO"}" = "debian" ]; then
            (
                cd /home/tmp
                apt-get download alsa-utils:i386
                dpkg -x alsa-utils_*_i386.deb .
                mv usr/bin/* .
            )
        else
            # Other distributions must be implemented or explicitly ignored
            error 1 "Cannot fetch alsa-utils:i386 for $DISTRO"
        fi
    ' | crouton -T -U -n "$release"

    exitswithin 0 30 host enter-chroot -n "$release" sh -exc '
        /usr/local/i386-linux-gnu/bin/cras_test_client --dump_server_info
        dd if=/dev/zero bs=48000 count=8 | \
                /home/tmp/aplay -fdat -v
        /home/tmp/arecord -fdat -v | \
                dd of=/dev/null bs=48000 count=8 iflag=fullblock
    '
fi

# Test CRAS autoupdate

# Destroy CRAS functionality
host enter-chroot -n "$release" -u 0 sh -exc 'rm -f /usr/local/lib/libcras*'
# At this stage, enter-chroot would try to run the auto-update, but
# we are not in a tty, so it doesn't.
fails host enter-chroot -n "$release" cras_test_client --dump_server_info

# Manually update
host enter-chroot -n "$release" -u 0 cras-audio-update

if [ -z "`cras_test_client --version`" ]; then
    # This version of Chromium OS does not support audio auto-update:
    # force update.
    host enter-chroot -n "$release" -u 0 cras-audio-update -f
fi

# Check that audio works again
exitswithin 0 30 host enter-chroot -n "$release" sh -exc '
    cras_test_client --dump_server_info
    dd if=/dev/zero bs=48000 count=8 | aplay -fdat -v
    arecord -fdat -v | dd of=/dev/null bs=48000 count=8 iflag=fullblock
'

echo 'install pulseaudio pulseaudio-utils' | \
    crouton -T -U -n "$release"
exitswithin 0 60 host enter-chroot -n "$release" sh -exc '
    pulseaudio --start
    dd if=/dev/zero bs=44100 count=8 | pacat -v
    parec -v | dd of=/dev/null bs=44100 count=8 iflag=fullblock
    dd if=/dev/zero bs=48000 count=8 | aplay -f dat -Dpulse -v
    arecord -fdat -Dpulse -v | \
        dd of=/dev/null bs=48000 count=8 iflag=fullblock
    cras_test_client --dump_server_info
    pulseaudio --kill
'

# On precise, test that install_mirror_package is able to up/downgrade
# libsbc1 as required. We first install version 1.2, then check that
# update downgrades it to 1.1 again.
if [ "$release" = "precise" ]; then
    # Test if libsbc1 version starts with the argument
    testsbcver() {
        host enter-chroot -n "$release" sh -exc '
            ok=''
            for ver in `dpkg-query -l libsbc1:* |
                    awk '"'"'/^[hi]i/ { print $3 }'"'"'`; do
                echo $ver | grep -q "^'"$1"'"
                ok='y'
            done
            test -n "$ok"
        '
    }

    echo '
        cras_arch=''
        if [ "`uname -m`" = "x86_64" ]; then
            cras_arch="i386"
        fi
        install_mirror_package 'libsbc1' \
            'pool/main/s/sbc' '1\.2-.*' $cras_arch
        install_mirror_package 'libsbc-dev' \
            'pool/main/s/sbc' '1\.2-.*' $cras_arch
    ' | crouton -T -U -n "$release"

    testsbcver '1.2-'

    crouton -u -n "$release" -t audio
    testsbcver '1.1-'
fi

host delete-chroot -y "$release"
